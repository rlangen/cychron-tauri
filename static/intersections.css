.intersection__top-level-container{
  display: inline-flex;
  flex-direction: column;
  width: max-content;
}

.intersection__grid-container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(var(--step__width), max-content));
  grid-template-rows: auto;  /* Define a single row */
  grid-auto-flow: column;   /* Place new items in columns, not rows */
  gap: 50px;
  position: relative;
}

.intersection__grid-item {
  display: flex;
  width: max-content;
  flex-direction: column;
}

.intersection__content-wrapper {
  width: max-content;
  flex-grow: 0;
}

.intersection__vertical-fill-line {
  width: var(--path__line-width);
  background-color: black;
  margin-left: 24px;
  flex-grow: 1;
}

.intersection__parallel-branch-seperation-line{
  border-top: double 6px black;
  height: var(--path__line-width);
  margin-right: calc(var(--step__width) - var(--step__number-field-width));
  background-color: transparent;
}
.intersection__alternative-branch-seperation-line {
  height: var(--path__line-width);
  background-color: black;
  margin-left: calc(var(--step__number-field-width)/2 - var(--path__line-width)/2);
  margin-right: calc(var(--step__width) - var(--step__number-field-width)/2 + var(--path__line-width)/2);
  flex-grow: 0;
}
.intersection__loop-branch-seperation-line {
  height: var(--path__line-width);
  background-color: black;
  margin-left: calc(var(--step__number-field-width)/2 - var(--path__line-width)/2);
  margin-right: calc(var(--step__width) - var(--step__number-field-width)/2 + var(--path__line-width)/2);
  flex-grow: 0;
}

.intersection__hover-container {
  display: flex;
  flex-direction: column;
  position: relative;
}
.intersection__hover-container:hover .hover_control__container {
  display: grid;
  margin-left: 40px;
}